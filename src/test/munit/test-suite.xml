<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:db="http://www.mulesoft.org/schema/mule/db" 
	xmlns:http="http://www.mulesoft.org/schema/mule/http" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:dbserver="http://www.mulesoft.org/schema/mule/dbserver"
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" 
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:core="http://www.mulesoft.org/schema/mule/core" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/dbserver http://www.mulesoft.org/schema/mule/dbserver/current/mule-dbserver.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">

	<context:property-placeholder location="mule.test.properties"/>
	
	<munit:config name="munit" doc:name="MUnit configuration" mock-inbounds="false" mock-connectors="false" />
	<dbserver:config name="test-db" database="template-apiled-system-db" sqlFile="test-account.sql" doc:name="Test DB Server" />

	<spring:beans>
		<spring:import resource="classpath:system-api.xml" />
	</spring:beans>
	
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="${http.port}" basePath="/api" doc:name="HTTP Request Configuration">
        <http:raml-api-configuration location="system-api.raml"/>
    </http:request-config>


	<munit:before-suite name="BeforeSuite" description="MUnit Test">
        <dbserver:start-db-server config-ref="test-db" doc:name="Start DB Server"/>
    </munit:before-suite>

	<munit:after-suite name="AfterSuite" description="Ater suite actions">
		<dbserver:stop-db-server config-ref="test-db" doc:name="Stop DB Server" />
	</munit:after-suite>
    <munit:after-test name="test-suiteAfter_Test" description="After tests actions">
        <db:delete config-ref="Database" doc:name="DELETE all Accounts">
            <db:parameterized-query><![CDATA[DELETE FROM Account;]]></db:parameterized-query>

        </db:delete>
    </munit:after-test>


	<munit:test name="test-suite-get:/accounts:system-api-configTest" description="Test" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock SELECT">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['SELECT Accounts']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[{&quot;Id&quot;:&quot;2e1c66e5-1db8-11e6-8d57-54ee7534a10b&quot;,&quot;Name&quot;:&quot;Eduard Walker&quot;,&quot;BillingStreet&quot;:&quot;Pleasure 4598&quot;,&quot;BillingCity&quot;:&quot;Shreveport&quot;,&quot;BillingState&quot;:&quot;Louisiana&quot;,&quot;BillingPostalCode&quot;:&quot;71105&quot;,&quot;BillingCountry&quot;:&quot;United States&quot;,&quot;ShippingStreet&quot;:&quot;Autumn Leaf 3&quot;,&quot;ShippingCity&quot;:&quot;Jackson&quot;,&quot;ShippingState&quot;:&quot;Mississippi&quot;,&quot;ShippingPostalCode&quot;:&quot;39204&quot;,&quot;ShippingCountry&quot;:&quot;United States&quot;,&quot;LastModifiedDate&quot;:&quot;2016-05-19T13:52:36&quot;},{&quot;Id&quot;:&quot;7d940c44-1db7-11e6-8d57-54ee7534a10b&quot;,&quot;Name&quot;:&quot;Tom Walkers&quot;,&quot;BillingStreet&quot;:&quot;Pleasure 4598&quot;,&quot;BillingCity&quot;:&quot;Shreveport&quot;,&quot;BillingState&quot;:&quot;Louisiana&quot;,&quot;BillingPostalCode&quot;:&quot;71105&quot;,&quot;BillingCountry&quot;:&quot;United States&quot;,&quot;ShippingStreet&quot;:&quot;Autumn Leaf 3&quot;,&quot;ShippingCity&quot;:&quot;Jackson&quot;,&quot;ShippingState&quot;:&quot;Mississippi&quot;,&quot;ShippingPostalCode&quot;:&quot;39204&quot;,&quot;ShippingCountry&quot;:&quot;United States&quot;,&quot;LastModifiedDate&quot;:&quot;2016-05-19T13:47:40&quot;}]]"/>

        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Build whereClause as string in flowVar']"/>
            </mock:with-attributes>

            <mock:assertions-after-call>
                <munit:assert-on-equals message="The whereClause does not match!" expectedValue="AND Name LIKE '%walker%' AND LastModifiedDate &lt; '2016-05-20 00:00:00' AND LastModifiedDate &gt; '2016-05-18 00:00:00' ORDER BY LastModifiedDate DESC LIMIT 5 OFFSET 0" actualValue="#[flowVars.whereClause]" doc:name="Assert whereClause is correct"/>
            </mock:assertions-after-call>
        </mock:spy>
        <db:insert config-ref="Database"  doc:name="Insert test data">
            <db:parameterized-query><![CDATA[INSERT INTO Account (Id,BillingCity,BillingCountry,BillingPostalCode,BillingState,BillingStreet,Fax,LastModifiedDate,LastModifiedById,Name,Phone,ShippingCity,ShippingCountry,ShippingPostalCode,ShippingState,ShippingStreet) VALUES 
('074a8d46-1db3-11e6-8d57-54ee7534a10b','Shreveport','United States','71105','Louisiana','Pleasure 4598','1-(318)596-8475','2016-05-20 13:54:28','root@localhost','Jason Bourne','1-(318)596-8473','Jackson','United States','39204','Mississippi','Autumn Leaf 3'),
('2e1c66e5-1db8-11e6-8d57-54ee7534a10b','Shreveport','United States','71105','Louisiana','Pleasure 4598','1-(318)596-8475','2016-05-19 13:52:36','root@localhost','Eduard Walker','1-(318)596-8473','Jackson','United States','39204','Mississippi','Autumn Leaf 3'),
('42fed860-1db2-11e6-8d57-54ee7534a10b','Shreveport','United States','71105','Louisiana','Pleasure 4598','1-(318)596-8475','2016-05-19 13:10:14','root@localhost','Jimmy Jones','1-(318)596-8473','Jackson','United States','39204','Mississippi','Autumn Leaf 3'), 
('494ffe08-1c37-11e6-b43d-54ee7534a10b','Shreveport','United States','71105','Louisiana','Pleasure 4598','1-(318)596-8475','2016-05-17 15:57:26','root@localhost','Louie McNamara','1-(318)596-8473','Jackson','United States','39204','Mississippi','Autumn Leaf 3'), 
('4a2d4ea0-1cf4-11e6-b43d-54ee7534a10b','Shreveport','United States','71105','Louisiana','Pleasure 4598','1-(318)596-8475','2016-05-18 14:30:02','root@localhost','GI Joe','1-(318)596-8473','Jackson','United States','39204','Mississippi','Autumn Leaf 3'), 
('4bc5345c-1db7-11e6-8d57-54ee7534a10b','Shreveport','United States','71105','Louisiana','Pleasure 4598','1-(318)596-8475','2016-05-15 13:46:16','root@localhost','Franke Star','1-(318)596-8473','Jackson','United States','39204','Mississippi','Autumn Leaf 3'), 
('5978c321-1db2-11e6-8d57-54ee7534a10b','Shreveport','United States','71105','Louisiana','Pleasure 4598','1-(318)596-8475','2016-05-19 13:10:52','root@localhost','Jack Guererra','1-(318)596-8473','Jackson','United States','39204','Mississippi','Autumn Leaf 3'), 
('6f6e73d9-1db5-11e6-8d57-54ee7534a10b','Shreveport','United States','71105','Louisiana','Pleasure 4598','1-(318)596-8475','2016-05-19 13:32:57','root@localhost','Antonio Silva','1-(318)596-8473','Jackson','United States','39204','Mississippi','Autumn Leaf 3'), 
('7d940c44-1db7-11e6-8d57-54ee7534a10b','Shreveport','United States','71105','Louisiana','Pleasure 4598','1-(318)596-8475','2016-05-19 13:47:40','root@localhost','Tom Walkers','1-(318)596-8473','Jackson','United States','39204','Mississippi','Autumn Leaf 3'), 
('9849e1a2-1db7-11e6-8d57-54ee7534a10b','Shreveport','United States','71105','Louisiana','Pleasure 4598','1-(318)596-8475','2016-05-19 13:48:25','root@localhost','Andreas Fung','1-(318)596-8473','Jackson','United States','39204','Mississippi','Autumn Leaf 3');]]></db:parameterized-query>

        </db:insert>
        <http:request config-ref="HTTP_Request_Configuration" path="/accounts" method="GET" doc:name="GET">
            <http:request-builder>
                <http:query-param paramName="name" value="walker"/>
                <http:query-param paramName="modifiedAfter" value="2016-05-18T00:00:00.000Z"/>
                <http:query-param paramName="modifiedBefore" value="2016-05-20T00:00:00.000Z"/>
                <http:query-param paramName="orderBy" value="lastmodifieddate"/>
                <http:query-param paramName="order" value="desc"/>
                <http:query-param paramName="maxResults" value="5"/>
                <http:query-param paramName="offset" value="0"/>
            </http:request-builder>
        </http:request>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="Assert that http.status eq 200"/>
        <dw:transform-message doc:name="Transform response  to Java">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $.id]]></dw:set-payload>
        </dw:transform-message>

        <munit:assert-on-equals message="There should be particular Accounts retrieved" expectedValue="#[[&quot;2e1c66e5-1db8-11e6-8d57-54ee7534a10b&quot;, &quot;7d940c44-1db7-11e6-8d57-54ee7534a10b&quot;]]" actualValue="#[payload]" doc:name="There should be particular Accounts retrieved"/>
	</munit:test>
	<munit:test	name="test-suite-post:/accounts:application/json:system-api-configTest"	description="Test" >
        <dw:transform-message doc:name="Set payload">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "name": "Eduard Walker",
  "phone": "1-(318)596-8473",
  "email": "ewalker0@liveinternet.ru",
  "billingStreet": "Pleasure 4598",
  "billingCity": "Shreveport",
  "billingState": "Louisiana",
  "billingPostalCode": "71105",
  "billingCountry": "United States",
  "shippingStreet": "Autumn Leaf 3",
  "shippingCity": "Jackson",
  "shippingState": "Mississippi",
  "shippingPostalCode": "39204",
  "shippingCountry": "United States"
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Request_Configuration" path="/accounts" method="POST" doc:name="POST"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(201))]" doc:name="Assert that http.status eq 201"/>
        <db:select config-ref="Database" doc:name="SELECT Accounts">
            <db:parameterized-query><![CDATA[SELECT * FROM Account]]></db:parameterized-query>

        </db:select>
        <munit:assert-on-equals message="There should be one account in the DB." expectedValue="#[1]" actualValue="#[payload.size()]" doc:name="There should be one account in the DB"/>
	</munit:test>
	<munit:test name="test-suite-get:/accounts/id:system-api-configTest"	description="Test" >
        <flow-ref name="insertTestingAccountIntoDB" doc:name="Call insertTestingAccountIntoDB"/>

        <http:request config-ref="HTTP_Request_Configuration" path="/accounts/{id}" method="GET" doc:name="GET">
            <http:request-builder>
                <http:uri-param paramName="id" value="12345abc"/>
            </http:request-builder>
        </http:request>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="Assert that http.status eq 200"/>
	</munit:test>
	<munit:test	name="test-suite-put:/accounts/id:application/json:system-api-configTest"	description="Test" >
        <flow-ref name="insertTestingAccountIntoDB" doc:name="Call insertTestingAccountIntoDB"/>

        <dw:transform-message doc:name="Prepare payload">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "name": "Jason Bourne",
  "phone": "1-(318)596-8473",
  "fax": "1-(318)596-8474",
  "email": "test@example.com",
  "billingStreet": "Pleasure 4598",
  "billingCity": "Shreveport",
  "billingState": "Louisiana",
  "billingPostalCode": "71105",
  "billingCountry": "United States",
  "shippingStreet": "Autumn Leaf 3",
  "shippingCity": "Jackson",
  "shippingState": "Mississippi",
  "shippingPostalCode": "39204",
  "shippingCountry": "United States"
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Request_Configuration" path="/accounts/{id}" method="PUT" doc:name="PUT">
            <http:request-builder>
                <http:uri-param paramName="id" value="12345abc"/>
            </http:request-builder>
        </http:request>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(204))]" doc:name="Assert that http.status eq 204"/>
        <db:select config-ref="Database" doc:name="SELECT Accounts with specific name">
            <db:parameterized-query><![CDATA[SELECT * FROM Account WHERE Name = 'Jason Bourne';]]></db:parameterized-query>

        </db:select>
        <munit:assert-on-equals message="There should be one account selected" expectedValue="#[1]" actualValue="#[payload.size()]" doc:name="The updated account should be in the DB"/>
	</munit:test>
	<munit:test name="test-suite-delete:/accounts/id:system-api-configTest" description="Test" >
        <flow-ref name="insertTestingAccountIntoDB" doc:name="Call insertTestingAccountIntoDB"/>

        <http:request config-ref="HTTP_Request_Configuration" path="/accounts/{id}" method="DELETE" doc:name="DELETE">
            <http:request-builder>
                <http:uri-param paramName="id" value="12345abc"/>
            </http:request-builder>
        </http:request>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(204))]" doc:name="Assert that http.status eq 204"/>
        <db:select config-ref="Database" doc:name="SELECT Accounts">
            <db:parameterized-query><![CDATA[SELECT * FROM Account;]]></db:parameterized-query>

        </db:select>
        <munit:assert-on-equals message="There should be no account in the DB." expectedValue="#[0]" actualValue="#[payload.size()]" doc:name="There should be no account in the DB"/>
	</munit:test>
    <munit:test name="test-suite-delete:/accounts/id:system-api-configTest-nonExisting" description="Test" >
        <http:request config-ref="HTTP_Request_Configuration" path="/accounts/{id}" method="DELETE" doc:name="DELETE">
            <http:request-builder>
                <http:uri-param paramName="id" value="12345abc"/>
            </http:request-builder>
            <http:success-status-code-validator values="404"/>
        </http:request>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(404))]" doc:name="Assert that http.status eq 404"/>
        <db:select config-ref="Database" doc:name="SELECT Accounts">
            <db:parameterized-query><![CDATA[SELECT * FROM Account;]]></db:parameterized-query>

        </db:select>
        <munit:assert-on-equals message="There should be no account in the DB." expectedValue="#[0]" actualValue="#[payload.size()]" doc:name="There should be no account in the DB"/>
    </munit:test>
    <sub-flow name="insertTestingAccountIntoDB">
        <dw:transform-message doc:name="Prepare data for DB">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	  "Id" : "12345abc",
	  "Name": "Eduard Walker",
	  "Phone": "1-(318)596-8473",
	  "Email": "ewalker0@liveinternet.ru",
	  "BillingStreet": "Pleasure 4598",
	  "BillingCity": "Shreveport",
	  "BillingState": "Louisiana",
	  "BillingPostalCode": "71105",
	  "BillingCountry": "United States",
	  "ShippingStreet": "Autumn Leaf 3",
	  "ShippingCity": "Jackson",
	  "ShippingState": "Mississippi",
	  "ShippingPostalCode": "39204",
	  "ShippingCountry": "United States"
}]]></dw:set-payload>
        </dw:transform-message>
        <db:insert config-ref="Database" doc:name="INSERT testing Account">
            <db:parameterized-query><![CDATA[INSERT INTO Account ( 
	Id,   
	BillingCity,   
	BillingCountry, 
	BillingPostalCode,  
	BillingState,  
	BillingStreet,  
	Fax,  
	LastModifiedDate,  
	Name,  
	Phone,  
	ShippingCity,  
	ShippingCountry,  
	ShippingPostalCode, 
	ShippingState,  
	ShippingStreet
) VALUES (  
	#[payload.Id],   
	#[payload.BillingCity],  
	#[payload.BillingCountry],   
	#[payload.BillingPostalCode],  
	#[payload.BillingState],   
	#[payload.BillingStreet],   
	#[payload.Fax],   
	CURRENT_TIMESTAMP,   
	#[payload.Name], 
	#[payload.Phone], 
	#[payload.ShippingCity],  
	#[payload.ShippingCountry],   
	#[payload.ShippingPostalCode],   
	#[payload.ShippingState],   
	#[payload.ShippingStreet]
);]]></db:parameterized-query>
        </db:insert>
    </sub-flow>
</mule>
